import{_ as s,c as i,o as a,a9 as t}from"./chunks/framework.DgZLXPSQ.js";const e="/assets/v030.B7Hb2TBi.png",y=JSON.parse('{"title":"Axe API v1.3 is out!","description":"","frontmatter":{},"headers":[],"relativePath":"blog/2024-04-08-axe-api-v1-3-is-out.md","filePath":"blog/2024-04-08-axe-api-v1-3-is-out.md"}'),n={name:"blog/2024-04-08-axe-api-v1-3-is-out.md"},p=t(`<h1 id="axe-api-v1-3-is-out" tabindex="-1">Axe API v1.3 is out! <a class="header-anchor" href="#axe-api-v1-3-is-out" aria-label="Permalink to &quot;Axe API v1.3 is out!&quot;">​</a></h1><p><code>v1.3</code> comes with one feature and a security upgrades.</p><p>Let&#39;s discover it more!</p><h2 id="index-ts-file-for-hook-functions" tabindex="-1"><code>index.ts</code> file for hook functions <a class="header-anchor" href="#index-ts-file-for-hook-functions" aria-label="Permalink to &quot;\`index.ts\` file for hook functions&quot;">​</a></h2><p>Hooks and events are a crucial part of Axe API. It allows you to add your application logic to your API in a very efficient and testable way. In this section, we will cover the logic of it.</p><p>A simple hook or event function look like the following example;</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-uPg0O" id="tab-2gaDkz8" checked><label for="tab-2gaDkz8">app/v1/Hooks/User/onBeforeInsert.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { IContext } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;axe-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // add your custom logic in here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></div></div><p>Developers had to put hook functions to separate files. It was useful if your logic is too complicated.</p><p>Now developers can put hook functions to <code>index.ts</code> file directly. Also, they can use the separated file method at the same time.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-XE-Lf" id="tab-lAixvyt" checked><label for="tab-lAixvyt">app/v1/Hooks/User/index.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { IContext } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;axe-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onBeforeInsert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // add your custom logic in here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onAfterInsert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // add your custom logic in here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></div></div><h2 id="v0-30-is-in-the-maintenance" tabindex="-1"><code>v0.30</code> is in the maintenance <a class="header-anchor" href="#v0-30-is-in-the-maintenance" aria-label="Permalink to &quot;\`v0.30\` is in the maintenance&quot;">​</a></h2><p>The maintenance period has begun for the <code>v0.30</code> version of Axe API. It will reach EOL at the end of Q3 2024.</p><p><img src="`+e+'" alt="v0.30"></p><p>You can find the details in the <a href="/upgrading/versioning-policy.html">Versioning Policy </a>.</p><p>You can use the <a href="/upgrading/v1.html">Upgrading to v1</a> tutorial to upgrade your APIs.</p>',15),l=[p];function h(o,k,r,d,c,g){return a(),i("div",null,l)}const E=s(n,[["render",h]]);export{y as __pageData,E as default};
