import{_ as i,c as a,am as e,o as t}from"./chunks/framework.WY5c5XXN.js";const E=JSON.parse('{"title":"Axe API v1.2 is out!","description":"","frontmatter":{},"headers":[],"relativePath":"blog/2024-03-16-axe-api-v1-2-is-out.md","filePath":"blog/2024-03-16-axe-api-v1-2-is-out.md"}'),n={name:"blog/2024-03-16-axe-api-v1-2-is-out.md"};function h(l,s,p,k,o,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="axe-api-v1-2-is-out" tabindex="-1">Axe API v1.2 is out! <a class="header-anchor" href="#axe-api-v1-2-is-out" aria-label="Permalink to &quot;Axe API v1.2 is out!&quot;">​</a></h1><p><code>v1.2</code> comes with two important features that you can start to use.</p><p>Let&#39;s discover it more!</p><h2 id="advanced-hook-types" tabindex="-1">Advanced hook types <a class="header-anchor" href="#advanced-hook-types" aria-label="Permalink to &quot;Advanced hook types&quot;">​</a></h2><p>Axe API provides a better type definitions for hooks.</p><p>For example, in the following hook (<code>onBeforeUpdate</code>), the query was looking like an optional variable. But for the <code>onBeforeUpdate</code>, it wasn&#39;t optional. The problem was; Axe API was using <code>IContext</code> for all hooks.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { IContext } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;axe-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  query?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;owner_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, req.original.auth);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>With the new hooks parameter types, you can use a specific type for your hook function like the following example;</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { IBeforeUpdateContext } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;axe-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IBeforeUpdateContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;owner_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, req.original.auth);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="short-serialization-file-name" tabindex="-1">Short serialization file name <a class="header-anchor" href="#short-serialization-file-name" aria-label="Permalink to &quot;Short serialization file name&quot;">​</a></h2><p>Developers are be able to use the model name as the serializer name directly now.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-OIJLD" id="tab-Vl8VDDF" checked><label data-title="ts" for="tab-Vl8VDDF">ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line diff remove"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`app/v1/Serialization/UserSerialization.ts\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line diff add"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`app/v1/Serialization/User.ts\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span></code></pre></div></div></div><p>We can handle this change without a major version update requirement. Old naming is deprecated and it will be removed in the next major release.</p>`,13)]))}const c=i(n,[["render",h]]);export{E as __pageData,c as default};
