import{_ as a,D as t,c as l,k as e,a as s,I as n,R as h,o as p}from"./chunks/framework.Kvze0q-R.js";const _=JSON.parse('{"title":"Model.search()","description":"","frontmatter":{},"headers":[],"relativePath":"reference/model-search.md","filePath":"reference/model-search.md"}'),r={name:"reference/model-search.md"},c={id:"model-search",tabindex:"-1"},o=e("code",null,"search()",-1),d=e("a",{class:"header-anchor",href:"#model-search","aria-label":'Permalink to "Model.`search()` <Badge type="warning" text="experimental" />"'},"â€‹",-1),k=h(`<div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Currently, the full-text search feature is <strong>EXPERIMENTAL</strong>.</p><p>Still, we strongly suggest to use it in some little parts of your application.</p></div><p>You can decide which fields should be indexed on Elasticsearch.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can find more information in <a href="/learn/full-text-search.html">Full-text search</a> section.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You should review the <a href="/reference/elastic-search-configs.html">Elasticsearch Configs</a> and the <a href="/reference/search-configs.html">Search Configs</a></p></div><p>For example, in the following example, only the <code>name</code> and <code>surname</code> fields will be indexed on the Elasticsearch.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-e7P_N" id="tab-16oRcvF" checked="checked"><label for="tab-16oRcvF">app/v1/Models/User.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Model } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;axe-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fillable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;surname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;surname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User;</span></span></code></pre></div></div></div><p>After that definition:</p><ul><li>Axe API creates the indexes automatically in the initialization process.</li><li>Axe API saves, updates, and deletes the data on the index by using the primary key.</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You MUST activate the <a href="/reference/handlers-search-handler.html">SEARCH</a> handler to allow HTTP clients are able to use the full-text search feature.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can manipulate the search query by overriding the <a href="/reference/model-get-search-query.html">getSearchQuery()</a> function.</p></div>`,10);function E(g,u,m,y,f,F){const i=t("Badge");return p(),l("div",null,[e("h1",c,[s("Model."),o,s(),n(i,{type:"warning",text:"experimental"}),s(),d]),k])}const b=a(r,[["render",E]]);export{_ as __pageData,b as default};
