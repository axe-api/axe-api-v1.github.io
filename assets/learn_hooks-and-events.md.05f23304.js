import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.18efe07a.js";const o="/assets/axe-api-hook-event-naming.a97a38cd.png",l="/assets/axe-api-hooks-and-events.af485bf1.png",f=JSON.parse('{"title":"Hooks and Events","description":"","frontmatter":{},"headers":[],"relativePath":"learn/hooks-and-events.md","filePath":"learn/hooks-and-events.md"}'),t={name:"learn/hooks-and-events.md"},p=n(`<h1 id="hooks-and-events" tabindex="-1">Hooks and Events <a class="header-anchor" href="#hooks-and-events" aria-label="Permalink to &quot;Hooks and Events&quot;">​</a></h1><p class="description"> Hooks and events are a crucial part of Axe API. It allows you to add your application logic to your API in a very efficient and testable way. In this section, we will cover the logic of it. </p><ul class="intro"><li>You will learn</li><li>What are hooks and events?</li><li>What is the difference between hooks and events?</li><li>How to define hooks and events?</li><li>How to get the HTTP Request context?</li></ul><h2 id="the-definition" tabindex="-1">The definition <a class="header-anchor" href="#the-definition" aria-label="Permalink to &quot;The definition&quot;">​</a></h2><p><strong>Hooks</strong> and <strong>Events</strong> are just functions that help to attach your application logic to Axe API.</p><p>A simple <em>hook</em> or <em>event</em> function look like the following example;</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IHookParameter } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axe-api&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">context</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IHookParameter</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// add your custom logic in here</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IHookParameter } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axe-api&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">context</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IHookParameter</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// add your custom logic in here</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>As you can see, it is a very simple function. You can add <em>hook/event</em> functions to your API, and bind them with models in the Axe API way. Once they are bonded, Axe API uses your functions during the <em>HTTP Request-Response cycle</em>.</p><h2 id="hook-vs-event" tabindex="-1">Hook vs. Event <a class="header-anchor" href="#hook-vs-event" aria-label="Permalink to &quot;Hook vs. Event&quot;">​</a></h2><p>You can&#39;t tell the difference between a hook function from an event function. They are completely the same. You can define <code>async</code> functions for both hooks and events.</p><p>The difference is how Axe API calls them.</p><p>In an <strong>HTTP Request/Response cycle</strong>, Axe API calls both hooks and events at the same time. But Axe API doesn&#39;t wait for the events as it does for <strong>hooks</strong>. You can check out the following example of how Axe API calls hooks and events to understand the difference;</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processHTTPRequest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// doing some stuffs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Setting the hook parameters</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hookParameters</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Wait till the end</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callHooks</span><span style="color:#E1E4E8;">(hookParameters);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// DO NOT wait the function</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">callEvents</span><span style="color:#E1E4E8;">(hookParameters);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// doing some stuffs</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processHTTPRequest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// doing some stuffs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Setting the hook parameters</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hookParameters</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Wait till the end</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callHooks</span><span style="color:#24292E;">(hookParameters);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// DO NOT wait the function</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">callEvents</span><span style="color:#24292E;">(hookParameters);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// doing some stuffs</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>The function above is just a <em>demonstration</em> of how Axe API handles an HTTP Request in the background. As you can see, Axe API calls hooks and events with the same parameters. But it doesn&#39;t wait until the event functions are completed, unlike the hook functions.</p><p>This is the only difference between hooks and events.</p><h2 id="auto-discovering" tabindex="-1">Auto-discovering <a class="header-anchor" href="#auto-discovering" aria-label="Permalink to &quot;Auto-discovering&quot;">​</a></h2><p>Axe API discovers your hook and event functions automatically. But you have to follow some rules. Otherwise, your functions would be ignored by Axe API.</p><p>Here are the rules;</p><ul><li>All hook and event functions should be placed under the <code>Hooks</code> or the <code>Events</code> folder.</li><li>All hook and event functions should work with a model. To provide that information, your function should be placed under the exact model name. For example; <code>app/Hooks/User</code>. In this case, you should have a model named <code>User</code>.</li><li>All hook and event function names should be described as when the function should be executed. For example; <code>onBeforePaginate</code>, <code>onAfterPaginate</code>, etc.</li><li>All hook and event files should export the function value as the default value.</li></ul><p>If your hook or event function doesn&#39;t apply all rules, your function would be ignored.</p><p>If you defined a valid hook or event function, Axe API executes your function at the correct time in the HTTP Request-Response cycle automatically.</p><p>The following examples demonstrate the correct hook event function definitions;</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-W3G9v" id="tab-DfEOpu3" checked="checked"><label for="tab-DfEOpu3">Hooks/User/onBeforeInsert.ts</label><input type="radio" name="group-W3G9v" id="tab-eldMcYu"><label for="tab-eldMcYu">Hooks/User/onAfterUpdate.ts</label><input type="radio" name="group-W3G9v" id="tab-BDw4Nb0"><label for="tab-BDw4Nb0">Events/User/onAfterInsert.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IHookParameter } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axe-api&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">context</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IHookParameter</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// This will be executed on before Insert User</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IHookParameter } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axe-api&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">context</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IHookParameter</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// This will be executed on before Insert User</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IHookParameter } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axe-api&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">context</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IHookParameter</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// This will be executed on after Update User</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IHookParameter } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axe-api&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">context</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IHookParameter</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// This will be executed on after Update User</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IHookParameter } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axe-api&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">context</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IHookParameter</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// This will be executed on after Insert User</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IHookParameter } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axe-api&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">context</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IHookParameter</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// This will be executed on after Insert User</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></div></div><h2 id="naming-rules" tabindex="-1">Naming rules <a class="header-anchor" href="#naming-rules" aria-label="Permalink to &quot;Naming rules&quot;">​</a></h2><p>Axe API executes your hook or event functions by the place name.</p><p>Let&#39;s check out the following example;</p><p><img src="`+o+'" alt="Axe API Hook and Event naming"></p><ul><li><code>API Version</code>: This means your function will be executed in which API version.</li><li><code>Type</code>: Type means that your function will be executed as Hook or Event. You can put your function in the <code>Hooks</code> or the <code>Events</code> folder.</li><li><code>Model Name</code>: The model name means that your function will be working in which model. The model name should be exactly the same as the model name.</li><li><code>Timing</code>: The timing means when your function will be executed. There are two available options you can use; <ul><li><code>onBefore</code>: On the before the action has been executed.</li><li><code>onAfter</code>: On the after the action has been executed.</li></ul></li><li><code>Action Type</code>: The action type describes that in which action your function is related. The possible options are; <ul><li><code>Insert</code>: Inserting a new record.</li><li><code>UpdateQuery</code>: The fetching-data that would be updated action.</li><li><code>Update</code>: The action of data update.</li><li><code>DeleteQuery</code>: The fetching-data that would be delete action.</li><li><code>Delete</code>: The action of data delete.</li><li><code>ForceDeleteQuery</code>: The fetching-data that would be force-delete action.</li><li><code>ForceDelete</code>: The action of data force-delete.</li><li><code>Paginate</code>: The action of data paginate.</li><li><code>All</code>: The action of data fetching all.</li><li><code>Show</code>: The action of fetching one item.</li></ul></li></ul><h2 id="http-request-response-cycle" tabindex="-1">HTTP Request-Response Cycle <a class="header-anchor" href="#http-request-response-cycle" aria-label="Permalink to &quot;HTTP Request-Response Cycle&quot;">​</a></h2><p>Hook and event functions would be executed after the middlewares and the before serializer.</p><p>An HTTP Request can have two different phases by the handler types; query and action. You can use different hooks and events by handler type.</p><p><img src="'+l+`" alt="Axe API Hooks And Events Request-Response Cycle"></p><h2 id="advantages" tabindex="-1">Advantages <a class="header-anchor" href="#advantages" aria-label="Permalink to &quot;Advantages&quot;">​</a></h2><p>These kinds of functions have many advantages;</p><ul><li>It allows Axe API handles HTTP requests automatically instead of you.</li><li>You can add your application logic easily to the API at the same time.</li><li>You can write unit tests for your application logic easily because hook and event functions are completely decoupled from your API.</li></ul><h2 id="using-the-context" tabindex="-1">Using the context <a class="header-anchor" href="#using-the-context" aria-label="Permalink to &quot;Using the context&quot;">​</a></h2><p>Let&#39;s assume that you will send a confirmation email to the user after a new user has been created. In this case, you can create an event function. But you need the user&#39;s email address to send the email, right?</p><p>As a developer, you will need every data that you can use in the same HTTP Request in hook and event functions. Axe API provides this information via IHookParameters.</p><p>Let&#39;s check the following event function;</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-FcQrz" id="tab-u-6W4AB" checked="checked"><label for="tab-u-6W4AB">Events/User/onAfterInsert.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IHookParameter } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axe-api&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">context</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IHookParameter</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// This means the created user&#39;s email</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">email</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.item;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Let&#39;s send a welcome email to the user.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">sendWelcomeEmail</span><span style="color:#E1E4E8;">(email);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IHookParameter } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axe-api&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">context</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IHookParameter</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// This means the created user&#39;s email</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">email</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.item;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Let&#39;s send a welcome email to the user.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">sendWelcomeEmail</span><span style="color:#24292E;">(email);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></div></div><p>Axe API executes the <code>onAfterInsert</code> event after a user has been created. While doing that, it passes the <code>IHookParameters</code> to the event function. The <code>IHookParameters</code> contains many variables that can be used by you. One of them is the <code>item</code> variable that holds the active record item by the model.</p><p>For this example, it holds the created user value. You can use the <code>context.item</code> variable to get all created user data.</p><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next steps&quot;">​</a></h2><p>In this section, we covered the fundamentals of hooks and events. You can find more about it in the API Reference section.</p><p>We are going to talk about serializers in the next section.</p>`,45),c=[p];function r(i,y,d,E,h,u){return e(),a("div",null,c)}const v=s(t,[["render",r]]);export{f as __pageData,v as default};
