import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.18efe07a.js";const h=JSON.parse('{"title":"Database transactions","description":"","frontmatter":{},"headers":[],"relativePath":"learn/database-transactions.md","filePath":"learn/database-transactions.md"}'),l={name:"learn/database-transactions.md"},e=o(`<h1 id="database-transactions" tabindex="-1">Database transactions <a class="header-anchor" href="#database-transactions" aria-label="Permalink to &quot;Database transactions&quot;">​</a></h1><p class="description"> Axe API provides database transaction in a different way since it handles auto-generated routes. In this section, we are going to talk about the database transaction. </p><ul class="intro"><li>You will learn</li><li>What is database transaction?</li><li>How to create a database transaction?</li><li>What is the version-based database transactions?</li><li>What is the model-based database transactions?</li><li>What is the handler-based database transactions?</li><li>How to access a database transaction from hook and event functions?</li></ul><h2 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting started&quot;">​</a></h2><p>A database transaction in a REST API refers to a logical unit of work that includes one or more database operations, such as inserting, updating, or deleting records.</p><p>It ensures the <strong>consistency</strong> and <strong>integrity</strong> of data by grouping these operations together, making them either all succeed or all fail as a single atomic operation.</p><p>Transactions provide a mechanism for maintaining data integrity in complex operations and enable data consistency even in the presence of concurrent access.</p><h2 id="knex-js-example" tabindex="-1">Knex.js example <a class="header-anchor" href="#knex-js-example" aria-label="Permalink to &quot;Knex.js example&quot;">​</a></h2><p>Axe API uses <a href="https://knexjs.org/" target="_blank" rel="noreferrer">Knex.js</a> library under the hood. By default, you can use transactions with <strong>Knex.js</strong> like the following code example;</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">trx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> knex.</span><span style="color:#B392F0;">transaction</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">trx</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;books&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">({ name: </span><span style="color:#9ECBFF;">&quot;Old Books&quot;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(trx.commit)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(trx.rollback);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">trx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> knex.</span><span style="color:#6F42C1;">transaction</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">trx</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;books&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&quot;Old Books&quot;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(trx.commit)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(trx.rollback);</span></span></code></pre></div><p>This is a simple example of a database transaction.</p><h2 id="axe-api-style-transactions" tabindex="-1">Axe API style transactions <a class="header-anchor" href="#axe-api-style-transactions" aria-label="Permalink to &quot;Axe API style transactions&quot;">​</a></h2><p>We <strong>can&#39;t</strong> create a database transaction in Axe API like the example above. Because Axe API generates all routes automatically, and handles them. That&#39;s why a database transaction should be able to created by Axe API, and handles by all the HTTP request.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Of course, you can create a database transaction inside a simple hook or event function. But there is not any suggestay way to carry the transaction object between different hook files.</p></div><p>There are three strategies to create a database transaction;</p><ul><li>Version-Based</li><li>Model-Based</li><li>Handler-Based</li></ul><p>But before to see all of strategies, let&#39;s take a look how we can enable transactions for every routes and how we can use it.</p><h2 id="enable-in-every-routes" tabindex="-1">Enable in every routes <a class="header-anchor" href="#enable-in-every-routes" aria-label="Permalink to &quot;Enable in every routes&quot;">​</a></h2><p>To enable transactions in <em>every route</em>, you should use the following configuration.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-sTA6t" id="tab-_w5Gacd" checked="checked"><label for="tab-_w5Gacd">app/v1/config.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IVersionConfig } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axe-api&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">config</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IVersionConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  transaction: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> config;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IVersionConfig } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axe-api&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">config</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IVersionConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  transaction: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> config;</span></span></code></pre></div></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>We do <strong>NOT</strong> suggest that enable transaction for all routes. It can cause some performance downgrades.</p></div><h2 id="using-transaction-in-hooks" tabindex="-1">Using transaction in hooks <a class="header-anchor" href="#using-transaction-in-hooks" aria-label="Permalink to &quot;Using transaction in hooks&quot;">​</a></h2><p>When you enable transaction in a route, Axe API creates a database transaction in the starting of request handling. You can use that transaction variable in hook functions.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-aLLkM" id="tab-wXC76oZ" checked="checked"><label for="tab-wXC76oZ">app/v1/Hooks/User/onAfterInsert.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IHookParameter } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axe-api&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">database</span><span style="color:#E1E4E8;"> }</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IHookParameter</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// If you opened the transaction, \`database\` object is a</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// transaction database object by default. So you can use the \`database.commit()\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// or \`database.rollback()\` methods.</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IHookParameter } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axe-api&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> ({ </span><span style="color:#E36209;">database</span><span style="color:#24292E;"> }</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IHookParameter</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// If you opened the transaction, \`database\` object is a</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// transaction database object by default. So you can use the \`database.commit()\`</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// or \`database.rollback()\` methods.</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></div></div><p>By default, you should <strong>NOT</strong> need to commit the changes. Axe API handles commit and rollback actions instead of you.</p><p>But, if you throw an error, Axe API would automatically rollback the transaction. You don&#39;t have to do anything special in your hooks excep throwing an error.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-cTQNd" id="tab-Yplprik" checked="checked"><label for="tab-Yplprik">app/v1/Hooks/User/onAfterInsert.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ApiError, IHookParameter } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axe-api&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">database</span><span style="color:#E1E4E8;"> }</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IHookParameter</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// You can check anything in here and you can throw an HTTP Response as an exception</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ApiError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Unacceptable request!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ApiError, IHookParameter } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axe-api&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> ({ </span><span style="color:#E36209;">database</span><span style="color:#24292E;"> }</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IHookParameter</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// You can check anything in here and you can throw an HTTP Response as an exception</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Unacceptable request!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></div></div><p>In the example above, Axe API rollback the database transaction and throws the error to the HTTP client.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In the example above, you don&#39;t need to roll back your transaction. Axe API will handle it by default.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Event functions don&#39;t work synch with the HTTP request. That&#39;s why you can not use database transaction in event functions.</p></div><h2 id="version-based-transactions" tabindex="-1">Version-based transactions <a class="header-anchor" href="#version-based-transactions" aria-label="Permalink to &quot;Version-based transactions&quot;">​</a></h2><p>You can enable database transactions by handler types by applying the following codes.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-jL2ko" id="tab-HJs5bt_" checked="checked"><label for="tab-HJs5bt_">api/v1/config.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { IVersionConfig, HandlerTypes } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axe-api&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">config</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IVersionConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  transaction: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      handler: [HandlerTypes.</span><span style="color:#79B8FF;">INSERT</span><span style="color:#E1E4E8;">, HandlerTypes.</span><span style="color:#79B8FF;">UPDATE</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      transaction: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> config;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { IVersionConfig, HandlerTypes } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axe-api&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">config</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IVersionConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  transaction: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      handler: [HandlerTypes.</span><span style="color:#005CC5;">INSERT</span><span style="color:#24292E;">, HandlerTypes.</span><span style="color:#005CC5;">UPDATE</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      transaction: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> config;</span></span></code></pre></div></div></div><p>In the example above, we basically define that only <code>INSERT</code> and <code>UPDATE</code> handlers will use a transaction.</p><h2 id="model-based-transactions" tabindex="-1">Model-based transactions <a class="header-anchor" href="#model-based-transactions" aria-label="Permalink to &quot;Model-based transactions&quot;">​</a></h2><p>In your model file, you can decide to use database transaction for all <strong>model-related</strong> routes like the following example;</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-7DTfd" id="tab-r-bfLtB" checked="checked"><label for="tab-r-bfLtB">api/v1/Models/User.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Model } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axe-api&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transaction</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> User;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Model } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axe-api&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transaction</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> User;</span></span></code></pre></div></div></div><p>By the example above, all auto-generated routes by <code>User</code> model will use a database transaction.</p><h2 id="handler-based-transactions" tabindex="-1">Handler-based transactions <a class="header-anchor" href="#handler-based-transactions" aria-label="Permalink to &quot;Handler-based transactions&quot;">​</a></h2><p><strong>Handler-based</strong> database transactions are the most efficient way to define database transaction. By this strategy, you only create database structure for the routes that you really need.</p><p>Let&#39;s check the following example;</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-ykw4g" id="tab-rLtXOG5" checked="checked"><label for="tab-rLtXOG5">app/v1/Models/User.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Model, HandlerTypes } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axe-api&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transaction</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      handler: [HandlerTypes.</span><span style="color:#79B8FF;">INSERT</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      transaction: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> User;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Model, HandlerTypes } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axe-api&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transaction</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      handler: [HandlerTypes.</span><span style="color:#005CC5;">INSERT</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      transaction: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> User;</span></span></code></pre></div></div></div><p>By this model, Axe API creates a database transaction only for the <code>INSERT</code> handler.</p><h2 id="priority-of-strategies" tabindex="-1">Priority of strategies <a class="header-anchor" href="#priority-of-strategies" aria-label="Permalink to &quot;Priority of strategies&quot;">​</a></h2><p>Axe API uses some priority rules while it deciding to create a database transaction or not. Most-detailed configuration is more important for the Axe API. The importance of the strategies is listed below;</p><ol><li>Handler-based configurations</li><li>Model-based configurations</li><li>Version-based configurations</li></ol><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>1.</code> has higher priority than <code>2.</code> and <code>3.</code></p></div><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next steps&quot;">​</a></h2><p>In this section we tried to describe how you choose a good database transaction strategy for your API routes.</p><p>In the next section, we will give an example about how you migrate your database.</p>`,50),p=[e];function t(c,r,i,y,E,d){return a(),n("div",null,p)}const b=s(l,[["render",t]]);export{h as __pageData,b as default};
